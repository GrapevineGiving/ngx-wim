{"version":3,"file":"ngx-wim.js","sources":["ng://ngx-wim/lib/wim.service.ts","ng://ngx-wim/lib/wim.directive.ts","ng://ngx-wim/lib/wim.module.ts","ng://ngx-wim/public-api.ts","ng://ngx-wim/ngx-wim.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nexport type WimOptions = {\n  noEscape?: boolean;\n  noSanitize?: boolean;\n};\n\n// Delimiters must be have whitespace or line-boundary around them.\nconst WHITESPACE_OR_LINE_BREAK = /(?:^|\\s|$)/;\n// Common surrounding characters can sit between the whitespace/line-boundary and the delimiter,\n// like quotes, parens, etc.\n// NOTE: Since HTML escaping may have been performed, need to match both literal and escaped chars.\n// TODO: _*nested*_ delimiter support is hacky. Bolster logic for it.\nconst ALLOWED_LEFT_SURROUND = /(?:\\(|'|&#039;|\"|&quot;|&#34;|â|&#8216;|â|&#8220;|_|<em>|\\*|<strong>){0,3}/;\nconst ALLOWED_RIGHT_SURROUND = /(?:\\)|'|&#039;|\"|&quot;|&#34;|â|&#8217;|â|&#8221;|_|<\\/em>|\\*|<\\/strong>|[,.?!:]){0,3}/;\n// Returns a regex matching the delimiters and the text they wrap. The wrapped text may not include\n// the delimiter.\nconst WRAPPED_INLINE_MATCH = d =>\n  // Open delimiter\n  `\\\\${d}` +\n  // Capture the text between delimiters.\n  `(` +\n  // Text between starts with non-whitespace.\n  `[^\\\\s${d}]` +\n  // Text between must not contain line-breaks or large-whitespace.\n  `(?:[^\\\\r\\\\n\\\\t\\\\f\\\\v${d}]*` +\n  // Text between ends with non-whitespace.\n  `[^\\\\s${d}])?` +\n  `)` +\n  // Close delimiter\n  `\\\\${d}`;\n\n// A full regex to match a delimiter. Capture groups:\n// 0: Text before opening delimiter.\n// 1: Text between delimiters.\n// 2: Text after closing delimiter.\nconst INLINE_DELIMITER_REGEX = d =>\n  new RegExp(\n    '(' +\n      WHITESPACE_OR_LINE_BREAK.source +\n      ALLOWED_LEFT_SURROUND.source +\n      ')' +\n      WRAPPED_INLINE_MATCH(d) +\n      '(' +\n      ALLOWED_RIGHT_SURROUND.source +\n      WHITESPACE_OR_LINE_BREAK.source +\n      ')',\n    'gm'\n  );\n\nconst STRONG_REGEX = INLINE_DELIMITER_REGEX('*');\nconst EM_REGEX = INLINE_DELIMITER_REGEX('_');\n\n// There is no general regex that can capture URLs-in-text perfectly. This is our good-enough\n// approximation.\n// TODO: Allow URL preceeded/followed by parenthesis, quotes, etc.\n// TODO: Allow IDN/Unicode domains.\nconst URL_REGEX_PATH_FINAL_CHARS = 'a-z0-9\\\\/\\\\-+&@#%=~_|$';\nconst URL_REGEX_FOLLOWING_CHARS = '?!:,.';\nconst URL_REGEX_PATH_CHARS = URL_REGEX_PATH_FINAL_CHARS + URL_REGEX_FOLLOWING_CHARS;\nconst URL_REGEX = new RegExp(\n  // Capture group $1: URL is preceeded by line-boundary or whitespace.\n  '(^|\\\\s)' +\n    // Capture group $2: the URL.\n    '(' +\n    // Optional protocols http://, https://, and ftp://\n    '(?:https?://|ftp://)?' +\n    // Domain plus any subdomains\n    '(?:[a-z0-9\\\\-]{1,63}\\\\.)+' +\n    // TLD\n    '[a-z]{1,63}' +\n    // Optional path. The final character's set is limited to prevent some ending punctuation.\n    // E.g., the final period of \"foo.com/bar.baz.\" shouldn't be included in the URL.\n    `(?:[${URL_REGEX_PATH_CHARS}]*[${URL_REGEX_PATH_FINAL_CHARS}])?` +\n    // End of URL capture group.\n    ')' +\n    // Capture group $3: URL is followed by line-boundary, whitespace, or \"following char.\"\n    `($|\\\\s|[${URL_REGEX_FOLLOWING_CHARS}])`,\n  'gi'\n);\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WimService {\n  constructor(private domSanitizer: DomSanitizer) {}\n\n  private static escapeHtml(message: string): string {\n    // NOTE: Weird bug workaround. Angular complains `Expression form not supported` with some\n    // static methods. Either storing the param as a const before using it or adding `// @dynamic`\n    // to the class avoids it.\n    const msg = message;\n    return msg\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n  }\n\n  toHtml(message: string, options: WimOptions = {}): string {\n    if (!options.noEscape) {\n      message = WimService.escapeHtml(message);\n    }\n\n    // Links!\n    // TODO: Prevent escaping link chars like &.\n    message = message.replace(URL_REGEX, (x, preceeding, url, following) => {\n      // If the URL doesn't have a protocol, prepend the relative protocol, '//'.\n      const href = url.match(/^((http|https|ftp):\\/\\/)/i) ? url : '//' + url;\n      return `${preceeding}<a target=\"_blank\" href=\"${href}\">${url}</a>${following}`;\n    });\n\n    // Inline delimiters like *bold* and _italic_.\n    message = message.replace(STRONG_REGEX, '$1<strong>$2</strong>$3');\n    message = message.replace(EM_REGEX, '$1<em>$2</em>$3');\n\n    // Breaks\n    message = message.replace(/\\n/g, '<br>');\n\n    if (!options.noSanitize) {\n      message = this.domSanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    return message;\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, Renderer2 } from '@angular/core';\n\nimport { WimService } from './wim.service';\n\n@Directive({\n  selector: '[wim]',\n})\nexport class WimDirective implements OnChanges {\n  @Input('wim') wim: string;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer2: Renderer2,\n    private wimService: WimService\n  ) {}\n\n  ngOnChanges() {\n    const html = this.wimService.toHtml(this.wim || '');\n    this.renderer2.setProperty(this.elementRef.nativeElement, 'innerHTML', html);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { WimDirective } from './wim.directive';\nimport { WimService } from './wim.service';\n\n@NgModule({\n  declarations: [WimDirective],\n  imports: [],\n  exports: [WimDirective],\n  providers: [WimService],\n})\nexport class WimModule {}\n","/*\n * Public API Surface of ngx-wim\n */\n\nexport * from './lib/wim.directive';\nexport * from './lib/wim.module';\nexport * from './lib/wim.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}